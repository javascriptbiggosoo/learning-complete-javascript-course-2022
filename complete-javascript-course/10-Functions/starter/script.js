'use strict';

// //127. Default Parameters
// //127. Default Parameters
// //127. Default Parameters

// const bookings = [];

// const createBooking = function (
//   flightNum,
//   numPassengers = 1,
//   price = 199 * numPassengers
// ) {
//   const booking = {
//     flightNum,
//     numPassengers,
//     price,
//   };
//   console.log(booking);
//   bookings.push(booking);
// };

// createBooking('LH123');
// createBooking('LH123', 2, 800);
// createBooking('LH123', 2);
// createBooking('LH123', 5);
// createBooking('LH123', undefined, 1000); // ÌååÎùºÎØ∏ÌÑ∞ Ïä§ÌÇµÌïòÎäîÎ≤ï

// // 128. How Passing Arguments Works: Value vs. Reference
// // 128. How Passing Arguments Works: Value vs. Reference
// // 128. How Passing Arguments Works: Value vs. Reference

// // ÎπÑÌïòÏù∏ÎìúÎçîÏî¨ primitive, referenceÏùò Î¶¨Î∑∞Ïù∏Îç∞ Ìï®ÏàòÎ∂ÄÎ∂ÑÏóêÏÑú Îã§Ïãú ÏÉÅÍ∏∞Ìï† ÌïÑÏöîÍ∞Ä ÏûàÎã§

// const flight = 'LH234';
// const jonas = {
//   name: 'Jonas Schmedtmann',
//   passport: 24739479284,
// };

// const checkIn = function (flightNum, passenger) {
//   flightNum = 'LH999'; // Ïã§Ï†ú ÏΩîÎî©ÏùÑ Ìï†Îïå ÌååÎùºÎØ∏ÌÑ∞Î°ú Î∞õÏïÑÏò®Í±∏ Ìï®ÏàòÏïàÏóêÏÑú Î∞îÎ°ú Î∞îÍæ∏Îäî ÏùºÏùÄ.... ÏûàÏùÑ Ïàò ÏóÜÎã§. ÏùòÎØ∏Í∞Ä ÏóÜÏúºÎãàÍπê. ÌïôÏäµÏö©ÏúºÎ°ú Î≥¥Ïó¨Ï£ºÎäîÍ±∞Îã§.
//   passenger.name = `Mr. ` + passenger.name;
//   if (passenger.passport === 24739479284) {
//     alert('Checked in');
//   } else {
//     alert('Wrong passport!');
//   }
// };

// checkIn(flight, jonas);

// // ÏñòÎäî Í∑∏ÎåÄÎ°†Îç∞(real value)
// console.log(flight); // LH234
// // Î≥ÄÌñàÎî∞?!(reference)
// console.log(jonas); // {name: 'Mr. Jonas Schmedtmann', passport: 2473549124890}

// // primitiveÍ∞Ä argumentÎ°úÏÑú ÎÑòÏñ¥Í∞ÄÎ©¥ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú copyÍ∞Ä ÎÑòÏñ¥Í∞Ñ Í≤ÉÏù¥Îã§.
// const flightNum = flight; // Ïù¥ ÎëêÍ∞ÄÏßÄÍ∞Ä ÏÑúÎ°ú Îã§Î•∏ Í≤ÉÏ≤òÎüº, „Öá„Öã?

// // objectÍ∞Ä ÎÑòÏñ¥Í∞ÄÎäîÍ±¥ Ïù¥Îü∞Í±∞Îã§
// const passenger = jonas; // Ï†ÑÏóê Î¥§ÏßÄÎßå Ïù¥Í±¥ Í∞ôÏùÄ memory heapÏùÑ Ï∞∏Ï°∞ÌïòÍ≥† ÏûàÏùÑ ÎøêÏù¥Îã§. copyÍ∞Ä ÏïÑÎãàÎã§(ÎπÑÌïòÏù∏ÎìúÎçîÏî¨ ÎßàÏßÄÎßâÍ∞ïÏùò)

// const newPassport = function (person) {
//   person.passport = Math.trunc(Math.random() * 100000000000);
// };
// newPassport(jonas);
// checkIn(flight, jonas); // Ï†Ä ÏúÑÏóê Ïã§ÌñâÌïúÍ±∞Îûë Í≤∞Í≥ºÍ∞Ä Îã§Î•¥Îã§, jonasÍ∞Ä Î∞îÎÄê Í≤É.

// // Í≤∞Î°†
// // jsÏóêÏÑúÎäî Î†àÌçºÎü∞Ïä§Î•º Ìï®ÏàòÏóê Í∞ñÎã§Î∞ïÏßÄ ÏïäÎäîÎã§ Î∞∏Î•òÎßåÏùÑ Í∞ñÎã§Î∞ïÎäîÎã§.
// // Î≠ê.. Î†àÌçºÎü∞Ïä§ Í∑∏ ÏûêÏ≤¥ÎèÑ Ïó¨Ï†ÑÌûà Î∞∏Î•òÏù¥Í∏¥ÌïòÎã§. Î©îÎ™®Î¶¨ Ï£ºÏÜåÎ•º Îã¥Í≥†ÏûàÎäî Î∞∏Î•òÏù∏Í±∞ÏßÄ
// // Î†àÌçºÎü∞Ïä§Î•º Î†àÌçºÎü∞Ïä§Î°úÏÑú Ìï®ÏàòÏóê Î∞ïÎäîÍ≤å ÏïÑÎãàÎùº Í∑∏ Î©îÎ™®Î¶¨ Ï£ºÏÜåÏù∏ Î∞∏Î•òÎ•º Î≥¥ÎÇ∏Îã§ Í∑∏ÏÜåÎ¶¨Îã§.
// // Ïù¥Í±∏ Í∞ïÏùò Ï¥àÏûÖÏóê ÏÑ§Î™ÖÌï¥Ïïº Ïù¥Î≤à Ï±ïÌÑ∞Í∞Ä Ïñ¥Î†µÏßÄ ÏïäÏùÑÍ±∞ÎùºÍ≥†ÌïòÎÑ§Ïöî

// 130. Functions Accepting Callback Functions
// // 130. Functions Accepting Callback Functions
// // 130. Functions Accepting Callback Functions

// const oneWord = function (str) {
//   return str.replaceAll(' ', '').toLowerCase();
// };

// const upperFirstWord = function (str) {
//   const [first, ...others] = str.split(' ');
//   return [first.toUpperCase(), ...others].join(' ');
// };

// // Higher-order function
// const transformer = function (str, fn) {
//   console.log(`Original string: ${str}`);
//   console.log(`Transformed string: ${fn(str)}`);
//   console.log(`Transformed by: ${fn.name}`); // functionÎèÑ method Í∞ñÍ≥†ÏûàÎåîÏßÄÏöî? propertyÎèÑ Í∞ñÍ≥† ÏûàÎã§Îä•; https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function
// };

// //  JS uses callbacks all the time
// transformer('JavaScript is the best!', upperFirstWord); // upperFirstWordÎäî ÏΩúÎ∞±Ìï®Ïàò!
// transformer('JavaScript is the best!', oneWord); // oneWordÎäî ÏΩúÎ∞±Ìï®Ïàò!
// // ÏΩîÎçîÍ∞Ä ÏßÅÏ†ë `oneWord()` Ïù¥Îü∞ÏãùÏúºÎ°ú Ìò∏Ï∂úÏãúÌÇ® ÏΩîÎìúÍ∞Ä ÏóÜÎäîÎç∞, JSÍ∞Ä Ïã§ÌñâÎêòÎäî Í≥ºÏ†ïÏóêÏÑú Ïã§ÌñâÎêòÎ≤ÑÎ¶¨Îäî(?) Ïï†Îì§ÏùÑ ÏΩúÎ∞±Ìï®ÏàòÎùºÍ≥† Î∂ÄÎ•∏ÎãµÎãàÎã§.
// // Ïö∞Î¶¨Í∞Ä Ìò∏Ï∂úÌïúÍ≤å ÏïÑÎãàÍ≥† transformerÍ∞Ä Ìò∏Ï∂úÌïúÍ±∞ÏûÑ! ÏïîÌäº Í∑∏Îüº!

// const high5 = function () {
//   console.log('üñê');
// };
// document.body.addEventListener('click', high5); // ÏñòÎèÑ ÏΩúÎ∞±Ïù¥ÏßÄ

// //ÏΩúÎ∞±Ìï®ÏàòÎ•º Ïì∏ Ïàò ÏûàÎã§ÎäîÍ±¥ ÏΩîÎìúÎ•º Ï™ºÍ∞úÏÑú Ïì∏ Ïàò ÏûàÍ≤å ÎêòÎ©¥ÏÑú Ïû¨ÏÇ¨Ïö©ÏÑ±Ïù¥ Ï¶ùÍ∞ÄÎêòÎäî Ïù¥Ï†êÏù¥ ÏûàÎã§
// // Îçî Ï¢ãÏùÄ Ïù¥Ï†êÏùÄ Ï∂îÏÉÅÌôîÍ∞Ä Ïö©Ïù¥Ìï¥ÏßÑÎã§ÎäîÍ≤É
// // Ìä∏ÎûúÏä§Ìè¨Î®∏ Ìò∏Ï∂úÌïúÍ±∏ Î≥¥Î©¥ Í∑∏ ÌïúÏ§ÑÎßå Î¥êÎèÑ ÎåÄÏ∂© Î≠òÌïòÎäî Ïï§ÏßÄ Ïù¥Ìï¥ÌïòÍ∏∞ ÏâΩÍ≤†ÏßÄÏöî?
// // Ïù¥ Ï∂îÏÉÅÌôîÏóê ÎåÄÌï¥ÏÑ† Í∞ùÏ≤¥ÏßÄÌñ• ÏÑπÏÖòÏóêÏÑú Îòê Î∞∞ÏõÅÏãúÎã§

// // 131. Functions Returning Functions
// // 131. Functions Returning Functions
// // 131. Functions Returning Functions

// // Îã§Ïãú, Ìï®ÏàòÎäî, valueÎã§.

// const greet = function (greeting) {
//   return function (name) {
//     console.log(`${greeting} ${name}`);
//   };
// };
// // 1
// const greeterHey = greet('Hey');
// greeterHey('Jinyoung');
// greeterHey('Minwoo');
// // 2
// greet('Hello')('Nico');
// // 3
// const greetArr = greeting => name => console.log(`${greeting} ${name}`);
// greetArr('Hi')('Nico');

// // 132. The call and apply Methods
// // 133. The bind Method
// // 132. The call and apply Methods
// // 133. The bind Method

// const lufthansa = {
//   airline: 'Lufthansa',
//   iataCode: 'LH',
//   bookings: [],
//   book(flightNum, name) {
//     console.log(
//       `${name} booked a seat on ${this.airline} flight ${this.iataCode}${flightNum}`
//     );
//     this.bookings.push({ flight: `${this.iataCode}${flightNum}`, name });
//   },
// };

// lufthansa.book(239, 'Jonas Schmedtmann');
// lufthansa.book(635, 'John Smith');

// const eurowings = {
//   airline: 'Eurowings',
//   iataCode: 'EW',
//   bookings: [],
// };

// const book = lufthansa.book; // JSÌï®ÏàòÎäî 1Í∏â Ìï®ÏàòÏù¥Í∏∞ ÎïåÎ¨∏Ïóê Í∞ñÎã§Ïì∏ Ïàò ÏûàÏñ¥Ïöî

// // book(23, 'Sarah Williams');
// // Does NOT work. bookÏùÄ ÏïÑÏßÅ lufthansa.bookÍ≥º Îã§Î•∏Ï†êÏù¥ ÏûàÎã§.
// // methodÎäî Î∂ÄÎ™® objectÎ•º thisÎ°ú Ïì∞ÏßÄÎßå Í∑∏ Î∞ñÏóê ÏûàÎäî bookÏùÄ thisÎ•º Ï†ÑÏó≠ÏúºÎ°ú Ïì∞Í∏∞ÎïåÎ¨∏Ïóê ÌòÑÏû¨ thisÎäî undefinedÎã§

// // Î∞ñÏóê ÏûàÎäî book functionÏù¥ ÏßÄÍ∏à Ïö∞Î¶¨Í∞Ä ÏùòÎèÑÌïòÍ≥† ÏûàÎäî, Ïñ¥Îäê Í∞ùÏ≤¥Ïùò methodÏ≤òÎüº ÏûëÎèôÌïòÍ≤å ÌïòÎ†§Î©¥ Ïñ¥ÎñªÍ≤å Ìï¥ÏïºÌï†Íπå? 1. call method 2. bind method

// // 1. Call method
// book.call(lufthansa, 239, 'Mary Cooper'); // Ï≤´ Ïù∏ÏûêÎ•º thisÍ∞Ä Í∞ÄÎ•¥ÌÇ¨ objectÎ°ú ÏûÖÎ†• ÌõÑ ÎÇòÎ®∏ÏßÄÎäî ÏõêÎûò methodÏóêÏÑú ÌïÑÏöîÌñàÎçò Ïù∏ÏûêÎ•º ÎÑ£ÏúºÎ©¥ ÎêúÎãµÎãàÎã§.
// console.log(lufthansa);

// book.call(eurowings, 23, 'Sarah Williams'); // Ïù¥Îü∞ÏãùÏúºÎ°ú Îã§Î•∏ Í∞ùÏ≤¥ÏóêÎèÑ Ïç®Î®πÏùÑ Ïàò ÏûàÍ≤†ÏßÄÏöî?
// console.log(eurowings);

// const swiss = {
//   airline: 'Swiss Air Lines',
//   iataCode: 'LX',
//   bookings: [],
// };

// book.call(swiss, 583, 'Mary Cooper');

// const flightData = [583, 'George Cooper'];
// book.call(swiss, ...flightData); // Ïù¥Îü∞ ÌôúÏö©ÎèÑ Í∞ÄÎä•ÌïòÎã§Îä•;
// console.log(swiss);

// // 133. The bind Method

// // Ï†Ñ Í∞ïÏùòÏóêÏÑú Ï≤´ Î∞©Î≤ï 1. callÏùÑ Î¥§ÏúºÎãà Ïù¥Ï†ú 2. bindÎ•º Î∞∞Ïö∏ Ï∞®Î°Ä, Ï∞∏Í≥†Î°ú Ïù¥Í≤å Îçî Ïú†Ïö©ÌïòÍ≥† ÏûêÏ£º Ïì∞ÏùºÍ±∞ÎùºÏÑú Ï§ëÏöîÌïòÎã®Îã§.

// // 2. Bind method
// // book.call(eurowings, 23, 'Sarah Williams'); Ïù¥Í±∞Îûë Í∞ôÏùÄ Í∏∞Îä•ÏùÑ Íµ¨ÌòÑÌï¥Î≥¥Ï£†
// const bookLH = book.bind(lufthansa);
// const bookLX = book.bind(swiss);
// const bookEW = book.bind(eurowings); // Îã§Î•∏ Í≥≥Ïóê ÏûàÎäî Ìï®Ïàò(methodÌè¨Ìï®)Î•º Í∞ÄÏ†∏ÏôÄÏÑú, thisÍ∞Ä Í∞ÄÎ•¥ÌÇ¨ objectÎ•º ÏßÄÏ†ïÌïòÍ≥† Î≥ÄÏàòÏóê Îã¥ÏúºÎ©¥
// bookEW(23, 'Steven WIlliams'); // Î∞îÍπ•ÏóêÏÑú Î∞îÎ°ú, ÏßÄÏ†ïÌïú object ÎÇ¥Ïùò methodÏôÄ Í∞ôÏùÄ Ïó≠Ìï†ÏùÑ ÌïòÎäî Ìï®ÏàòÎ•º Ïç®Î®πÏùÑ Ïàò ÏûàÍ≤åÎêúÎã§. Ïû¨ÏÇ¨Ïö©ÏÑ± ÏßÄÏ†º

// const bookEW23 = book.bind(eurowings, 23); // Ïã¨ÏßÄÏñ¥ ÌååÎùºÎØ∏ÌÑ∞ÍπåÏßÄ ÎØ∏Î¶¨ ÏßÄÏ†ïÌï¥ÎÜìÏùÑ Ïàò ÏûàÎã§..
// bookEW23('Kim Jinyoung');
// bookEW23('Lim Chaesung');
// // Ïù¥ bookEW23 Í∞ôÏù¥ argumentÎ•º ÏßÄÏ†ï(ÎîîÌè¥Ìä∏ Ï†ïÎèÑÍ∞Ä ÏïÑÎãàÎùº)Ìï¥ÎÜìÏùÄ ÏïÑÏù¥Î•º partial applicationÏúºÎ°ú Î∂ÄÎ•∏Îã®Îã§.

// // with Event Listeners
// // with Event Listeners
// lufthansa.planes = 300;
// lufthansa.buyPlane = function () {
//   console.log(this);
//   this.planes++;
//   console.log(this.planes);
// };
// // lufthansa.buyPlane(); // Ïûò ÎêòÎäîÍ±∞ ÌôïÏù∏Ìï®

// // document.querySelector('.buy').addEventListener('click', lufthansa.buyPlane);
// // Ïó• Ïôú logÍ∞Ä Î≤ÑÌäºÏúºÎ°ú ÎÇòÏò§Îäî Í≤ÉÏù¥ÏßÄÏöî?
// // ÏòàÏ†Ñ Ïù¥Î°† Í∞ïÏùòÏóêÏÑú Ïù¥Î≤§Ìä∏Ìï∏Îì§Îü¨Ïùò thisÎäî Ìï≠ÏÉÅ target elementÎ•º Í∞ÄÎ•¥ÌÇ®Îã§Í≥† ÌñàÏäµÎãàÎãπ

// // Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ÏóêÏÑú thisÏóê elementÍ∞Ä Îì§Ïñ¥Í∞ÄÍ∏∏ ÏõêÌïòÏßÄ ÏïäÎäîÎã§Î©¥?
// document
//   .querySelector('.buy')
//   .addEventListener('click', lufthansa.buyPlane.bind(lufthansa));
// // Ïó≠Ïãú bindÏïº.. ÏÑ±Îä• ÌôïÏã§ÌïòÍµ¨Îßå.
// // Î∞îÎ°ú bind(ÌÉÄÍ≤ü object), ÏñºÌïè Ìï®ÏàòÍ∞Ä ÏïÑÎãàÎùº Ìï®ÏàòÌò∏Ï∂ú Í∞ôÏßÄÎßå! bindÍ∞Ä Î±âÎäî valueÎäî functionÏù¥ÎùºÎäîÍ±∞!

// // Partial application
// // Partial application
// // this Î¨∏Ï†úÍ∞Ä ÏïÑÎãàÎùºÎèÑ bindÎäî Ïú†Ïö©ÌïòÍ≤å Ïì∞Ïùº ÎïåÍ∞Ä ÏûàÎã§
// // ÎßêÌñàÏßÄÎßå ÌååÏÖú Ïñ¥ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏù¥ÎûÄÍ±¥ parameterÎ•º ÏÇ¨Ï†ÑÏóê ÏßÄÏ†ïÌï¥Ï£ºÎäî Í≤ÉÏù¥Îã§.
// const addTax = (rate, value) => value + value * rate;
// console.log(addTax(0.1, 200));
// // ÎÇòÎùºÎßàÎã§ ÏÑ∏Ïú®Ïù¥ Îã§Î•¥Îã§Î©¥ ÎÇòÎùºÎ≥ÑÎ°ú Ìï®ÏàòÎ•º ÎßåÎì§Í≤å ÏïÑÎãàÎùº Í≥†Ï†ï ÌååÎùºÎØ∏ÌÑ∞Í∞íÎßå Ï°∞Ï†ïÌï¥Ï£ºÎ©¥ ÎêúÎã§.
// const addVAT = addTax.bind(null, 0.23); // Í∑∏Î¶¨Í≥† Ïù¥Îü∞ Ïö©ÎèÑÎ°ú ÏÇ¨Ïö©Ìï† Í≤ΩÏö∞Ïóê thisÎ•º Í≥†Î†§Ìï† Ïù¥Ïú†Í∞Ä ÏóÜÎã§. Í∑∏ÎûòÏÑú Ï≤´ Ïù∏ÏûêÏóê Î≠ò ÎÑ£Ïñ¥ÎèÑ ÏÉÅÍ¥ÄÏóÜÏßÄÎßå ÏùºÎã®ÏùÄ null(forÎ¨∏ ÏóêÏÑú _ Í∞ôÏùÄ Ïó≠Ìï†)ÏùÑ ÏßëÏñ¥ÎÑ£Îäî Í≤ΩÏö∞Í∞Ä Ï†úÏùº ÎßéÎã§

// console.log(addVAT(100));
// console.log(addVAT(23));

// // Í∞ôÏùÄ Ïó≠Ìï†
// // addVAT = value => value + value * 0.23
// // Í∞ôÏùÄ Ïó≠Ìï† 22222
// const addTaxRate = function (rate) {
//   return function (value) {
//     return value + value * rate;
//   };
// };
// const addVAT2 = addTaxRate(0.23);
// console.log(addVAT2(100));
// console.log(addVAT2(23));

// Coding Challenge #1
// Coding Challenge #1
// Coding Challenge #1

// // Let's build a simple poll app!

// // A poll has a question, an array of options from which people can choose, and an array with the number of replies for each option. This data is stored in the starter object below.
// // Here are your tasks:

// // 1. Create a method called 'registerNewAnswer' on the 'poll' object. The method does 2 things:
// //   1.1. Display a prompt window for the user to input the number of the selected option. The prompt should look like this:
// //         What is your favourite programming language?
// //         0: JavaScript
// //         1: Python
// //         2: Rust
// //         3: C++
// //         (Write option number)
// const poll = {
//   answers: [0, 0, 0, 0],
//   registerNewAnswer() {
//     let answer = Number(
//       prompt(`What is your favourite programming language?
//     0: JavaScript
//     1: Python
//     2: Rust
//     3: C++`)
//     );
//     typeof answer === 'number' &&
//       answer < this.answers.length &&
//       this.answers[answer]++;
//     this.displayResults(this.answers);
//     this.displayResults();
//     this.displayResults('string');
//   },
//   displayResults(type = 'array') {
//     if (type === 'array') {
//       console.log(this.answers);
//     } else if (type === 'string') {
//       console.log(`Poll results are ${this.answers.join(', ')}`);
//     }
//   },
// };
// //   1.2. Based on the input number, update the answers array. For example, if the option is 3, increase the value AT POSITION 3 of the array by 1. Make sure to check if the input is a number and if the number makes sense (e.g answer 52 wouldn't make sense, right?)

// // 2. Call this method whenever the user clicks the "Answer poll" button.
// document
//   .querySelector('.poll')
//   .addEventListener('click', poll.registerNewAnswer.bind(poll));
// // 3. Create a method 'displayResults' which displays the poll results. The method takes a string as an input (called 'type'), which can be either 'string' or 'array'. If type is 'array', simply display the results array as it is, using console.log(). This should be the default option. If type is 'string', display a string like "Poll results are 13, 2, 4, 1".

// // 4. Run the 'displayResults' method at the end of each 'registerNewAnswer' method call.

// // HINT: Use many of the tools you learned about in this and the last section üòâ

// // BONUS: Use the 'displayResults' method to display the 2 arrays in the test data. Use both the 'array' and the 'string' option. Do NOT put the arrays in the poll object! So what shoud the this keyword look like in this situation?
// poll.displayResults.call({ answers: [5, 2, 3] }, 'string');
// poll.displayResults.call({ answers: [1, 5, 3, 9, 6, 1] }, 'string');
// poll.displayResults.call({ answers: [1, 5, 3, 9, 6, 1] });
// // BONUS TEST DATA 1: [5, 2, 3]
// // BONUS TEST DATA 2: [1, 5, 3, 9, 6, 1]

// // GOOD LUCK üòÄ

// // 135. Immediately Invoked Function Expressions (IIFE)
// // 135. Immediately Invoked Function Expressions (IIFE)
// // 135. Immediately Invoked Function Expressions (IIFE)

// // ÌïúÎ≤àÎßå Ïã§ÌñâÎêòÎäî Ìï®ÏàòÍ∞Ä ÏûàÏßÄÏöî? Í∑∏Îü∞Í±¥ Ìò∏Ï∂ú Ìïú Î≤à ÌïòÎ©¥ ÏÇ¨ÎùºÏ°åÏúºÎ©¥ Ï¢ãÍ≤†Ïñ¥Ïöî.

// // Ïó¨ÌÉú Ìï¥Ïò® Î∞©Ïãù

// const runOnce = function () {
//   console.log('This will never run again');
// };
// runOnce();

// // IIFE

// // function () {
// //   console.log('This will never run again');
// //   const isPrivate = 23;
// // } // ÏùµÎ™Ö Ìï®ÏàòÏóê Ïù¥Î¶Ñ ÏïàÏßëÏñ¥ÎÑ£Í≥† ÏΩîÎìúÎ•º Ïã§ÌñâÌïòÎ©¥ ÏóêÎü¨Í∞Ä ÎÇúÎã§.

// (function () {
//   console.log('This will never run again');
//   const isPrivate = 23;
// })(); // Í∑ºÎç∞ Í¥ÑÌò∏Î•º ÏîåÏõåÎ≤ÑÎ¶¨Î©¥ ÏóêÎü¨Í∞Ä ÏïàÎÇúÎã§. Í∑∏Î¶¨Í≥† Í±∞Í∏∞Îã§ Îí§Ïóê Í¥ÑÌò∏ÌïòÎÇò Îçî Î∂ôÏù¥Î©¥ Î∞îÎ°ú Ìò∏Ï∂ú Í∞ÄÎä• „Öã„Ñ∑

// (() => console.log('This will ALSO never run again'))();

// // Í≥ºÍ±∞Ïóê varÎ•º Ïù¥Ïö©Ìï†ÎïåÎäî Ïä§ÏΩîÌîÑ Ï†úÌïúÏùò Ïö©ÎèÑÎ°ú Ïì∞ÏòÄÎã§Í≥† ÌïúÎã§.

// // console.log(isPrivate);

// // ÌïòÏßÄÎßå es6ÏóêÏÑú constÏôÄ letÏùò Îì±Ïû•ÌïòÎ©¥ÏÑú Í¥ÑÌò∏Îßå ÏîåÏö∞Î©¥ Í∑∏ ÏΩîÎìúÎ∏îÎü≠ ÏïàÏóêÏÑúÎßå Ïä§ÏΩîÌïëÎêòÎèÑÎ°ù Ìï† Ïàò ÏûàÍ≤åÎêòÍ≥† Í∑∏Í≤å Îçî Í∞ÑÌé∏Ìïú Î∞©Î≤ïÏù¥Í∏∞ ÎïåÎ¨∏Ïóê Ïä§ÏΩîÌîÑ Ï†úÌïú Ïö©ÎèÑÎ°úÏç®Îäî Ìö®Ïö©Ïù¥ ÏÇ¨ÎùºÏ°åÍ≥† Ïù¥Ï†† Ï†ïÎßê Ìï®Ïàò Îî± Ìïú Î≤à Ïì∞Í≥†Ïã∂ÏùÑÎïåÎßå Ïù¥Ïö©ÌïòÎ©¥ ÎêúÎã®Îã§.
// {
//   const isPrivate = 23;
// }

// console.log(isPrivate);

// // 136. Closures
// // 136. Closures
// // 136. Closures

// ÌÅ¥Î°úÏ†ÄÍ∞Ä Î¨¥ÏóáÏù∏ÏßÄ ÏïåÍ∏∞Ï†ÑÏóê,
// ÌÅ¥Î°úÏ†ÄÎäî IIFEÏôÄ ÎßàÏ∞¨Í∞ÄÏßÄÎ°ú jsÏóê Ï†ïÏãùÏúºÎ°ú Ï°¥Ïû¨ÌïòÎäî Í∏∞Îä•ÏùÄ ÏïÑÎãàÎã§
// ÏÉà arrayÎÇò function ÎßåÎì§ÎìØÏù¥ ÏΩîÎìú ÌïúÏ§ÑÎ°ú ÎöùÎî± ÎßåÎìúÎäî Í∏∞Îä•Ïù¥ Îî∞Î°ú ÏóÜÎã§Îäî ÏÜåÎ¶¨Îã§
// ÌïÑÏöîÌïú Í≤ΩÏö∞ Ïö∞Î¶¨Í∞Ä Ï†ÅÏö©Ìï† Ïàò ÏûàÎäî jsÏùò ÏûëÎèôÎ∞©Ïãù Ï§ë ÌïòÎÇòÏù¥Îã§.

const secureBooking = function () {
  let passengerCount = 0;
  return function () {
    passengerCount++;
    console.log(`${passengerCount} passengers`);
  };
};

const booker = secureBooking();

booker(); // 1 passengers
booker(); // 2 passengers
booker(); // 3 passengers
// ?
// Ïù¥Í≤å Ïôú Îê®?
// secureBookingÏùÄ ECÏóêÏÑú Ïù¥ÎØ∏ Îπ†Ï†∏ÎÇòÍ∞ÄÍ≥† Ìï®Ïàò ÏïàÏóê ÎßåÎì§Ïñ¥ÏßÑ Î≥ÄÏàòÎäî Ï†ÑÏó≠ÏóêÏÑú Î™ªÏç®ÏïºÌïòÏßÄÏïäÏùå?
// Îã§Ïãú Ï†ïÎ¶¨, bookerÏóê Ìï®ÏàòÎ•º Ìï†ÎãπÌïòÎäî secureBooking()ÏùÑ Ìò∏Ï∂úÌïú ÌõÑÏóê Ìï®ÏàòÎäî ÎçîÏù¥ÏÉÅ Ïó≠Ìï†ÏùÑ ÌïòÏßÄ Î™ªÌïòÎäîÎç∞, Ïó¨ÌÉú Î∞∞Ïö¥Í≤ÉÍ≥º Îã§Î•¥Í≤å Ìï®ÏàòÎÇ¥Ïùò Î≥ÄÏàòÏóê Ïó¨Ï†ÑÌûà Ï†ëÍ∑ºÍ∞ÄÎä•ÌïòÎã§.
// ÌÅ¥Î°úÏ†ÄÏùò Ïó≠Ìï†ÏùÄ Ìï®ÏàòÍ∞Ä ÎßåÎì§Ïñ¥ÏßÑ Í≥≥Ïóê ÏûàÏóàÎçò Î≥ÄÏàòÎ•º Í≥ÑÏÜç Ïì∏ Ïàò ÏûàÍ≤å Ìï¥Ï§ÄÎã§Îäî Í≤É.

// // 137. More Closure Examples
// // 137. More Closure Examples
// // 137. More Closure Examples

// Example 1
// Ïû¨ÏÑ†Ïñ∏Ïóê Í¥ÄÌïú Ïù¥ÏïºÍ∏∞
let f;
const g = function () {
  const x = 1;
  f = function () {
    console.log(x * 2);
  };
};

g();
// g()Í∞Ä f Ìï†ÎãπÏùÑ ÌïòÍ≥† ÎÅùÎÇ¨Îã§
f(); // 2
// f()Í∞Ä Ïã§ÌñâÎê†ÎïåÏóê ECÏóê g()Í∞Ä Îπ†Ï†∏ÎÇòÍ∞îÍ∏∞ ÎïåÎ¨∏Ïóê Ï†ëÍ∑ºÌï† x Î∞∏Î•òÍ∞Ä ÏûàÎäî variable environmentÎäî Ï¶ùÎ∞úÎêêÍ≥† fÌï®ÏàòÍ∞Ä Ìò∏Ï∂úÎêú Ï†ÑÏó≠ÏóêÏÑ† Ï∞æÏùÑ Ïàò ÏóÜÏßÄÎßå
// fÍ∞Ä Í∞ÄÎ∞©Ïóê xÎ•º Ïã∏ÏôîÍ∏∞ ÎïåÎ¨∏Ïóê (ÌÅ¥Î°úÏ†Ä ÎçïÎ∂ÑÏóê) Í∫ºÎÇ¥ Ïì∏ Ïàò ÏûàÏñ¥ÏÑú f()Í∞Ä Ìò∏Ï∂úÎêòÎ©¥ 2Í∞Ä Ï∂úÎ†•ÎêúÎã§

const h = function () {
  const y = 11;
  f = function () {
    console.log(y * 2);
  };
};

// Re-assignment f function
h();
f(); // 22
console.dir(f);
// Ïù¥ÍπåÏßÄ, Ìï®ÏàòÎ•º Î¶¨ÌÑ¥ÌïòÏßÄ ÏïäÍ≥† Ïû¨ÏÑ†Ïñ∏ ÌïòÎäîÍ≤É ÎòêÌïú  ÌÅ¥Î°úÏ†ÄÍ∞Ä ÎßåÎì§Ïñ¥ÏßÑÎã§Îäî ÏñòÍ∏∞ÏòÄÏùå

// Example 2
// ÌÉÄÏù¥Î®∏Ïóê Í¥ÄÌïú Ïù¥ÏïºÍ∏∞
const boardPassengers = function (n, wait) {
  const perGroup = n / 3;

  setTimeout(function () {
    console.log(`${perGroup} passengers per group`);
    console.log(`There are 3 groups, each group has ${perGroup} passengers`);
  }, wait * 1000);

  console.log(`Will start boarding in ${wait} seconds`);
};

boardPassengers(30, 3); // Ïù¥Í±∞ Ìò∏Ï∂úÌïòÏûêÎßàÏûê perGroupÍ∞Ä ÏÉùÏÑ±ÎêòÍ≥† Will start boarding in 3 secondsÍ∞Ä Ï∂úÎ†•ÎêòÍ≥†, 3Ï¥à ÌõÑÏóê perGroupÍ∞Ä Ï∂úÎ†•ÎêúÎã§
// ECÏóêÏÑú Ïù¥ÎØ∏ Îπ†Ï†∏ÎÇòÍ∞ÄÍ≥†, Ìï®Ïàò ÏïàÏóê ÎßåÎì§Ïñ¥ÏßÑ Î≥ÄÏàòÎäî Ï†ÑÏó≠ÏóêÏÑú Î™ªÏç®ÏïºÌïòÏßÄÏïäÏùå?
// Îã§Ïãú Ï†ïÎ¶¨, boardPassengersÏóê Ìï®ÏàòÎ•º Ìï†ÎãπÌïòÎäî ÌÉÄÏù¥Î®∏Î•º Ìò∏Ï∂úÌïú ÌõÑÏóê Ìï®ÏàòÎäî ÎçîÏù¥ÏÉÅ Ïó≠Ìï†ÏùÑ ÌïòÏßÄ Î™ªÌïòÎäîÎç∞, Ïó¨ÌÉú Î∞∞Ïö¥Í≤ÉÍ≥º Îã§Î•¥Í≤å Ìï®ÏàòÎÇ¥Ïùò Î≥ÄÏàòÏóê Ïó¨Ï†ÑÌûà Ï†ëÍ∑ºÍ∞ÄÎä•ÌïòÎã§.
// Ïù¥Í≤å Ï≤òÏùåÏóê ÎãπÏó∞ÌïòÍ≤å ÎäêÍª¥Ï°åÎäîÎç∞ ÏïåÍ≥†Î≥¥Îãà ÏÇ¨Ïã§ÏùÄ Ï¢Ä Î≥µÏû°ÌïúÍ±∞ÏòÄÎã§. Í∑∏ÎÉ• Ï†Ä boardPassengersÌï®ÏàòÍ∞Ä Í≥ÑÏÜç Ïã§ÌñâÎêòÎäî Ï§ëÏù¥Í≥† Í∑∏ÎûòÏÑú setTimeoutÏù¥ ÎãπÏó∞ÌïòÍ≤å argumentsÎ•º Î∞õÏïÑ Ïì∞Îäî Ï§Ñ ÏïåÏïòÎäîÎç∞.. Ïù¥ÎØ∏ Ìï®ÏàòÎäî ÎßàÏßÄÎßâ ÏΩòÏÜîÎ°úÍ∑∏Î•º Ï∂úÎ†•ÌïòÎ©¥ÏÑú ECÏóêÏÑú ÏÇ¨ÎùºÏ°åÍ≥† setTimeoutÏùÄ Ïì∏Ïì∏ÌïòÍ≤å ÎÇ®Í≤®ÏßÑ ÏÉÅÌÉúÏóêÏÑú.. argumentÎ•º ÌÅ¥Î°úÏ†ÄÎ•º ÌÜµÌï¥ Î∞õÏïÑÏò® Í≤ÉÏù¥ÏóàÎã§

// // 138. Coding Challenge #2
// // 138. Coding Challenge #2
// // 138. Coding Challenge #2

// // This is more of a thinking challenge than a coding challenge ü§ì

// // Take the IIFE below and at the end of the function, attach an event listener that changes the color of the selected h1 element ('header') to blue, each time the BODY element is clicked. Do NOT select the h1 element again!
// (function () {
//   const header = document.querySelector('h1');
//   header.style.color = 'red';
//   function toBlue() {
//     header.style.color = 'blue';
//   }

//   document.querySelector('body').addEventListener('click', toBlue);
// })();
// // And now explain to YOURSELF (or someone around you) WHY this worked! Take all the time you need. Think about WHEN exactly the callback function is executed, and what that means for the variables involved in this example.

// // ÏúÑ IIFEÏóêÏÑú Ìï®Ïàò Ïã§ÌñâÏù¥ Ï¢ÖÎ£åÎêòÏóàÎã§. Í∏ÄÏûêÎäî Îπ®Í∞õÎã§.
// // bodyÎ•º ÌÅ¥Î¶≠ÌïòÎ©¥ toBlueÍ∞Ä Ïã§ÌñâÎê†ÌÖêÎç∞ Í∑∏ Ìï®ÏàòÏïàÏóê ÏûàÎäî headerÎäî Ï†ÑÏó≠Ïóê Ï°¥Ïû¨ÌïòÏßÄ ÏïäÍ∏∞ ÎïåÎ¨∏Ïóê ÌÅ¥Î°úÏ†ÄÍ∞Ä ÏóÜÏóàÎã§Î©¥ Ï†úÍ∏∞Îä•ÏùÑ Ìï† Ïàò ÏóÜÏóàÏùÑ Í≤ÉÏù¥Îã§.
// // toBlueÎäî Ï£ΩÏùÄ Î∂ÄÎ™® Ìï®ÏàòÏùò Ïú†ÌíàÏùÑ Í∑∏ÎåÄÎ°ú Í∞ÄÏßÄÍ≥†ÏûàÎã§..

// // GOOD LUCK üòÄ
