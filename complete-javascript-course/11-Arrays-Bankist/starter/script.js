'use strict';

/////////////////////////////////////////////////
/////////////////////////////////////////////////
// BANKIST APP

// Data
const account1 = {
  owner: 'Jonas Schmedtmann',
  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],
  interestRate: 1.2, // %
  pin: 1111,
};

const account2 = {
  owner: 'Jessica Davis',
  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
  interestRate: 1.5,
  pin: 2222,
};

const account3 = {
  owner: 'Steven Thomas Williams',
  movements: [200, -200, 340, -300, -20, 50, 400, -460],
  interestRate: 0.7,
  pin: 3333,
};

const account4 = {
  owner: 'Sarah Smith',
  movements: [430, 1000, 700, 50, 90],
  interestRate: 1,
  pin: 4444,
};

const accounts = [account1, account2, account3, account4];

// Elements
const labelWelcome = document.querySelector('.welcome');
const labelDate = document.querySelector('.date');
const labelBalance = document.querySelector('.balance__value');
const labelSumIn = document.querySelector('.summary__value--in');
const labelSumOut = document.querySelector('.summary__value--out');
const labelSumInterest = document.querySelector('.summary__value--interest');
const labelTimer = document.querySelector('.timer');

const containerApp = document.querySelector('.app');
const containerMovements = document.querySelector('.movements');

const btnLogin = document.querySelector('.login__btn');
const btnTransfer = document.querySelector('.form__btn--transfer');
const btnLoan = document.querySelector('.form__btn--loan');
const btnClose = document.querySelector('.form__btn--close');
const btnSort = document.querySelector('.btn--sort');

const inputLoginUsername = document.querySelector('.login__input--user');
const inputLoginPin = document.querySelector('.login__input--pin');
const inputTransferTo = document.querySelector('.form__input--to');
const inputTransferAmount = document.querySelector('.form__input--amount');
const inputLoanAmount = document.querySelector('.form__input--loan-amount');
const inputCloseUsername = document.querySelector('.form__input--user');
const inputClosePin = document.querySelector('.form__input--pin');

// 145. Creating DOM Elements Î∂ÄÏ†ú: ".insertAdjacentHTML()"
// 145. Creating DOM Elements
// 145. Creating DOM Elements

// ÏûÖÏ∂úÍ∏à ÎÇ¥Ïó≠ÏùÑ Î∞òÏòÅÌï¥Î≥¥ÎäîÍ≤å Ïù¥Î≤à Î™©Ìëú
// ÌÅ¥Î¶∞ ÏΩîÎìú: Î∞ñÏóêÎã§ ÏΩîÎìúÎ•º ÏûëÏÑ±Ìï¥ÎèÑ ÎêúÎã§. Îã§Îßå Ìï®ÏàòÎ°ú ÎßåÎì§Ïñ¥ÏÑú Ïì∞ÎäîÍ≤å Ìõ® Ïî¨ Ï¢ã Îã§.
const displayMovements = function (movements) {
  containerMovements.innerHTML = ''; // Ïù¥ÎØ∏ Îã¥Í≤®ÏûàÎäî HTML ÎπÑÏö∞Í∏∞

  movements.forEach(function (mov, i) {
    const type = mov > 0 ? 'deposit' : 'withdrawal';
    const html = `
    <div class="movements__row">
      <div class="movements__type movements__type--${type}">${
      i + 1
    } ${type}</div>
      <div class="movements__value">${mov}</div>
    </div>
    `;
    // Ïûê forEachÎ•º ÎèåÎ¶¨Î©¥ÏÑú ÎßåÎì§Ïñ¥ÏßÑ Í∞Å .movements__rowÎ•º .movements ÏïàÏóê ÎÑ£Í≥†Ïã∂Îã§ Ïñ¥ÎñªÍ≤å Ìï¥ÏïºÌï†Íπå?

    //.insertAdjacentHTML()ÏúºÎ°ú ÏßëÏñ¥ÎÑ£ÏùÑÍ±∞ÏûÑ!
    containerMovements.insertAdjacentHTML('afterbegin', html);
    // ÏÇ¨Ïö©Î≤ï, ÏùºÎã® Ï≤´ Ïù∏ÏûêÎ°ú Ïï∫ÌÑ∞ÎπÑÍ∏¥,ÎπÑÌè¨ÏóîÎìú,#$@,@#$ Ï§ëÏóê Í≥†Î¶Ñ.(Ï°∞ÎÇòÏä§Îäî 4Í∞úÏ§ëÏóê  Ïï∫ÌÑ∞ÎπÑÍ∏¥,ÎπÑÌè¨ÏóîÎìú Ïô∏Ïóî Í±∞ÏùòÍ±∞Ïùò ÏïàÏì¥Îã®Îã§. https://developer.mozilla.org/ko/docs/Web/API/Element/insertAdjacentHTML)
    // ÎëêÎ≤àÏß∏ Ïù∏ÏûêÎäî Ï∂îÍ∞ÄÌï† htmlÏΩîÎìúÎ•º stringÏóê Îã¥ÏïÑÏÑú Ï£ºÎ©¥Îê®. ÏâΩÏßÄÏö©?
  });
};
displayMovements(account1.movements); // account1Ïùò ÏûÖÏ∂úÍ∏à Í∏∞Î°ùÏùÑ Î∞õÏïÑÏôîÏäµÎãàÎã§.

/////////////////////////////////////////////////
/////////////////////////////////////////////////
// LECTURES

const currencies = new Map([
  ['USD', 'United States dollar'],
  ['EUR', 'Euro'],
  ['GBP', 'Pound sterling'],
]);

// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

/////////////////////////////////////////////////
// // 141. Simple Array Methods
// // 141. Simple Array Methods
// // 141. Simple Array Methods

// // methodsÎûÄ objectsÏóêÏÑú Ìò∏Ï∂úÌïòÎäîÍ±∞ÎùºÍ≥† Î∞∞Ïõ†ÏûêÎÇòÏó¨? Í∑ºÎç∞ Ïñ¥ÎñªÍ≤å arrayÎäî methodsÎ•º Í∞ñÍ≥†ÏûàÎäî Í±∞ÏßÄÏöî?
// // -> Í∑∏ ÎßêÏù∏ Ï¶âÏä®, arraysÎòêÌïú objectsÎùºÎäî Í≤É(ÎëêÎë•) ÏùºÎã® ÎÑòÏñ¥Í∞ÄÍ≥†

// let arr = ['a', 'b', 'c', 'd', 'e'];

// // SLICE, arguments Î≤îÏúÑ Î∞ñÏùÑ ÎèÑÎ†§ÎÇ¥ÏÑú return, ÏõêÎ≥∏ÏùÄ Í∑∏ÎåÄÎ°ú
// console.log(arr.slice(2)); // [ 'c', 'd', 'e' ]
// console.log(arr.slice(2, 4)); // [ 'c', 'd' ]
// console.log(arr.slice(-2)); // [ 'd', 'e' ]
// console.log(arr.slice(1, -2)); // [ 'b', 'c' ]
// // ÏïÑÎûò Îëò Îã§ shallow copy, Ï∑®Ìñ•ÎåÄÎ°ú Ïì∞ÏãúÏò§
// console.log(arr.slice()); // [ 'a', 'b', 'c', 'd', 'e' ]
// console.log([...arr]); //[ 'a', 'b', 'c', 'd', 'e' ]

// // SPLICE, arguments Î≤îÏúÑ Î∞ñÏùÑ ÎèÑÎ†§ÎÇ¥ÏÑú return, ÎãπÏã†Ïùò ÏõêÎ≥∏, ÎèÑÎ†§Ï†∏ ÎÇ®ÏùÄ Î∂ÄÎ∂ÑÏúºÎ°ú ÎåÄÏ≤¥ÎêòÏóàÎã§.
// console.log(arr.splice(-1)); // [ 'e' ]
// console.log(arr); // [ 'a', 'b', 'c', 'd' ]
// arr.splice(1, 2);
// console.log(arr); // [ 'a', 'd' ]
// arr = ['a', 'b', 'c', 'd', 'e']; // Ïó≠Ïãú ÌÉÄÏûÑÏΩîÏä§Î™®Ïä§Ïïº.. ÏÑ±Îä• ÌôïÏã§ÌïòÍµ¨Îßå.

// // REVERSE, Îí§ÏßëÏùå, ÏñòÎèÑ ÏõêÎ≥∏ Î≥ÄÌòïÌï®
// const arr2 = ['j', 'i', 'h', 'g', 'f'];
// console.log(arr2.reverse()); // [ 'f', 'g', 'h', 'i', 'j' ]
// console.log(arr2); // [ 'f', 'g', 'h', 'i', 'j' ]

// // CONCAT, Ìï©Ïπ®
// const letters = arr.concat(arr2);
// // ÏïÑÎûò Îëò Îã§ Ï†ïÌôïÌûà ÎòëÍ∞ôÏù¥ ÎèôÏûëÌï®. Ï∑®Ìñ•ÎåÄÎ°ú ÏΩîÎî©ÌïòÏÑ∏Ïóº
// console.log(letters); // [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j' ]
// console.log([...arr, ...arr2]); // [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j' ]

// // JOIN, array to string
// console.log(letters.join(' - ')); // a - b - c - d - e - f - g - h - i - j

// // 142. Looping Arrays: forEach
// // 142. Looping Arrays: forEach
// // 142. Looping Arrays: forEach

// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

// for (const movement of movements) {
//   if (movement > 0) {
//     console.log(`You deposited ${movement}`);
//   } else {
//     console.log(`You withdrew ${Math.abs(movement)}`);
//   }
// }

// console.log('-------------------------------');

// // ÏΩúÎ∞±Ìï®ÏàòÎ•º Ïù∏ÏûêÎ°ú Î∞õÍ≥† ÏúÑÏôÄ ÎòëÍ∞ôÏùÄ ÎèôÏûëÏùÑ ÌïòÎäî .forEach()
// // Ï†Ñ ÏÑπÏÖòÏóêÏÑú ÎßêÌñàÏßÄÎßå Îã§Ïãú ÎßêÌï©ÎãàÎãπ Ïö∞Î¶¨Í∞Ä Ìï®ÏàòÌò∏Ï∂úÏùÑ ÏßÅÏ†ë ÏΩîÎî©Ìï¥ÎÜìÏßÄ ÏïäÏïÑÎèÑ, ÏΩúÎ∞±Ìï®ÏàòÎäî ÏΩîÎìúÍ∞Ä Ïã§ÌñâÎêòÎäî ÏôÄÏ§ëÏóê Ìò∏Ï∂úÎê† Ïàò ÏûàÏäµÎãàÎã§. ÎÑàÎ¨¥ ÎãπÏó∞Ìïú ÎßêÏù∏Îç∞ ÏïîÌäº Í∑∏Îüº
// // .forEach()Îäî Ïù¥ÌÑ∞Îü¨Î∏îÌïú objectÎ•º Î£®ÌïëÌïòÎ©¥ÏÑú Í∞Å elementÎ•º ÏΩúÎ∞±Ìï®ÏàòÏùò argumentÎ°ú ÎÑ£Í≥† Ìò∏Ï∂úÌïúÎã§
// movements.forEach(function (movement) {
//   if (movement > 0) {
//     console.log(`You deposited ${movement}`);
//   } else {
//     console.log(`You withdrew ${Math.abs(movement)}`);
//   }
// });
// // Í∑∏Î¶¨Í≥† Í∑∏ ÏΩúÎ∞±Ìï®ÏàòÎäî ÌòÑÏû¨ Î£®ÌïëÏ§ëÏù∏ elementÎ•º Ïù∏ÏûêÎ°ú Î∞õÎäîÎã§.
// // 0: function(200)
// // 1: function(450)
// // 2: function(400)
// // ...Ïù¥Îü∞Ïãù

// console.log('-------------------------------');

// // for ofÏùò Í≤ΩÏö∞ indexÍ∞Ä ÌïÑÏöîÌï† Îïê .entries()Î•º Ïì∞Î©¥ ÎêêÎã§
// for (const [i, movement] of movements.entries()) {
//   if (movement > 0) {
//     console.log(`Movement ${i + 1}: You deposited ${movement}`);
//   } else {
//     console.log(`Movement ${i + 1}: You withdrew ${Math.abs(movement)}`);
//   }
// }

// console.log('-------------------------------');

// // .forEach()Îäî Ïñ¥Îñ°Ìï®?
// movements.forEach(function (mov, i, arr) {
//   // ÏΩúÎ∞±Ìï®ÏàòÍ∞Ä Î∞õÎäîÍ±¥ elementÎøêÎßåÏù¥ ÏïÑÎãàÎã§. ÎëêÎ≤àÏß∏Î°ú indexÎ•º, ÏÑ∏Î≤àÏß∏Î°ú loopingÏ§ëÏù∏ arrayÍπåÏßÄ Î∞õÎäîÎã§.
//   // Ï≤´ argumentÎäî Ìï≠ÏÉÅ ÏûàÏñ¥ÏïºÌïòÏßÄÎßå ÎÇòÎ®∏ÏßÄÎäî ÌïÑÏöîÏóê Îî∞Îùº ÏûÖÎ†•ÌïòÏßÄ ÏïäÏïÑÎèÑ Í¥úÏ∞ÆÎã§
//   if (mov > 0) {
//     console.log(`Movement ${i + 1}: You deposited ${mov}`);
//   } else {
//     console.log(`Movement ${i + 1}: You withdrew ${Math.abs(mov)}`);
//   }
// });
// // (mov, , arr) Ïù¥Îü∞ÏãùÏúºÎ°úÎäî ÏûëÎèô Î™ªÌï® ÏïàÏç®ÎèÑ ÎëêÎ≤àÏß∏ Ïù∏Ïûê Ï§òÏïºÌï®

// // ÏúÑÏôÄ ÏïÑÎûòÏùò Ï∞®Ïù¥Îäî .forEach() Î£®ÌîÑÎäî breakÍ∞Ä ÏïàÎêúÎã§ÎäîÏ†ê. Î∏åÎ†àÏù¥ÌÅ¨Í∞Ä ÌïÑÏöîÌïòÎ©¥ Ìè¨Ïò§Î∏åÎ•º Ïì∞ÏÑ∏Ïöî „Öé„Öé. Í∑ºÎç∞ Î≠ê, ÏΩîÎìúÎäî ÏûêÍ∏∞ÎßåÏùò Ïä§ÌÉÄÏùºÏù¥ ÏûàÎäîÍ±∞ÎãàÍπå Îî±Ìûà  Ïù¥Îü∞ Ïù¥Ïú†Í∞Ä ÏóÜÎçîÎùºÎèÑ Ï∑®Ìñ•Îî∞Îùº Ìï≠ÏÉÅ Ìè¨Ïò§Î∏åÎßå Ïç®ÎèÑ ÎêòÍ∏¥Ìï¥Ïöî~~

// // 146. Coding Challenge #1
// // 146. Coding Challenge #1
// // 146. Coding Challenge #1
// // Julia and Kate are doing a study on dogs. So each of them asked 5 dog owners about their dog's age, and stored the data into an array (one array for each). For now, they are just interested in knowing whether a dog is an adult or a puppy. A dog is an adult if it is at least 3 years old, and it's a puppy if it's less than 3 years old.
// // Í∞ú ÎÇòÏù¥, 3Î≥¥Îã§ Ï†ÅÏúºÎ©¥ puppy ÏïÑÎãàÎ©¥ adultÎùºÍ≥†Ìï®

// // Create a function 'checkDogs', which accepts 2 arrays of dog's ages ('dogsJulia' and 'dogsKate'), and does the following things:

// const checkDogs = function (dogsJulia, dogsKate) {
//   // 1. Julia found out that the owners of the FIRST and the LAST TWO dogs actually have cats, not dogs! So create a shallow copy of Julia's array, and remove the cat ages from that copied array (because it's a bad practice to mutate function parameters)
//   const realDogsJulia = dogsJulia.slice(1, -2);
//   console.log(realDogsJulia);

//   // 2. Create an array with both Julia's (corrected) and Kate's data
//   const dogsBoth = [...realDogsJulia, ...dogsKate];

//   // 3. For each remaining dog, log to the console whether it's an adult ("Dog number 1 is an adult, and is 5 years old") or a puppy ("Dog number 2 is still a puppy üê∂")
//   dogsBoth.forEach(function (dog, i) {
//     const dogOld =
//       dog >= 3
//         ? `Dog number ${i + 1} is an adult, and is ${dog} years old"`
//         : `Dog number ${i + 1} is still a puppy üê∂`;
//     console.log(dogOld);
//   });
// };

// // 4. Run the function for both test datasets
// // TEST DATA 1: Julia's data [3, 5, 2, 12, 7], Kate's data [4, 1, 15, 8, 3]
// // TEST DATA 2: Julia's data [9, 16, 6, 8, 3], Kate's data [10, 5, 6, 1, 4]
// checkDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]);
// checkDogs([9, 16, 6, 8, 3], [10, 5, 6, 1, 4]);

// // HINT: Use tools from all lectures in this section so far üòâ

// // GOOD LUCK üòÄ

// // 148. The map Method
// // 148. The map Method
// // 148. The map Method

// // map vs. forEach, mapÏùÄ Í∞úÏ°∞Îêú elementÎì§Î°ú ÏÉà arrayÎ•º ÎßåÎì§Ïñ¥ÏÑú returnÌï¥Ï§ÄÎã§.
// // Ïù¥Î≤à ÏΩîÎìúÏùò Î™©Ï†ÅÏùÄ Îã¨Îü¨Î°ú ÌôòÏ†ÑÍ≥ÑÏÇ∞ÏùÑ Ìï¥Î≥¥Îäî Í≤ÉÏûÖÎãàÎë•
// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

// const eurToUsd = 1.1;

// // const movementsUSD = movements.map(function (mov) {
// //   return mov * eurToUsd;
// // }); // ÏÉà Ïñ¥Î†àÏù¥Ïóê ÏßëÏñ¥ÎÑ£ÏùÑ Î∞∏Î•òÎ•º Î¶¨ÌÑ¥ÌïòÏãúÎ©¥ Îê©ÎãàÎã§.
// const movementsUSD = movements.map(mov => mov * eurToUsd);
// // map methodÎäî Ïï†Î°úÏö∞ÌéëÏÖòÏù¥Îûë Ïì∞ÎäîÍ≤å Ï∞∏ Ïù¥ÏÅòÎã§

// console.log(movements);
// console.log(movementsUSD);

// // Ïù¥Î†áÍ≤å ÎßåÎì§Ïñ¥ÎèÑ Í∞ôÏùÄ ÎèôÏûëÏùÑ ÌïòÏßÄÎßå
// const movementsUSDfor = [];
// for (const mov of movements) movementsUSDfor.push(mov * eurToUsd);
// console.log(movementsUSDfor);
// // Ïñ¥Ï∞®Ìîº Ïù¥Î†áÍ≤å ÎßåÎì§Í≤å Î™©Ï†ÅÏù¥ÎùºÎ©¥ Ïù¥Í≤ΩÏö∞Ïóî.. Ï∑®Ìñ•ÏùÑ ÎÑòÏñ¥ÏÑú mapÏùÑ Ïì∞Í∏∞Î•º Í∂åÏû•ÌïúÎã§
// // Í≥ß Î∞∞Ïö∏ÌÖêÎç∞ Î™®Îçò ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏Îäî Ìï®ÏàòÌòï ÌîÑÎ°úÍ∑∏ÎûòÎ∞çÏùÑ ÏßÄÌñ•ÌïòÎäîÎç∞ Ïó¨Í∏∞ÏÑ† mapÏùÑ ÏÇ¨Ïö©Ìï¥Ï£ºÎäîÍ≤å Í∑∏ Ìå®Îü¨Îã§ÏûÑÏóêÏÑú Ï¢Ä Îçî Ï†ÅÌï©ÌïòÎã§.
// // Îßâ Î≥¥Ïù¥Îäî Ïù¥Ï†êÎßå Ìï¥ÎèÑ 1. ÏΩúÎ∞±Ìï®ÏàòÎ•º Ïù¥Ïö©ÌïúÎã§Î©¥ Ïó¨Îü¨ Ïû¨ÏÇ¨Ïö©Ïù¥ Í∞ÄÎä•Ìï¥ÏßÄÍ≥† 2.ÎïåÎ°úÎäî Î©îÏÜåÎìúÏôÄ ÏΩúÎ∞±Ìï®Ïàò Ïù¥Î¶ÑÎßå Î¥êÎèÑ Îã§Î•∏ ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Îì§Ïù¥ Ïù¥Í≤å Î¨¥Ïä® Ïó≠Ìï†ÏùÑ ÌïòÎäîÏßÄ ÏßêÏûëÌïòÍ∏∞ Ïâ¨ÏõåÏßÑÎã§.
// // Îã®Ïàú Î∞òÎ≥µÏù∏ forEachÏôÄÎäî Í≤©Ïù¥ Îã¨Îùº

// // ÎßµÏùò ÏΩúÎ∞±Ìï®ÏàòÎèÑ Ìè¨Ïù¥ÏπòÏôÄ Ï†ïÌôïÌûà Í∞ôÏùÄ ÏÑ∏Í∞ÄÏßÄ ÌååÎùºÎØ∏ÌÑ∞Î•º Í∞ÄÏßÑÎã§
// const movementDescriptions = movements.map(
//   (mov, i) =>
//     `Movement ${i + 1}: You ${mov > 0 ? 'deposited' : 'withdrew'} ${Math.abs(
//       mov
//     )}`
// );
// console.log(movementDescriptions);
// // ÏßÄÍ∏à ÎèåÏïÑÍ∞ÄÎäî Ïù¥ ÏΩîÎìúÏóêÏÑú ÎßµÏùÑ ÌÜµÌï¥ÏÑú ÏΩúÎ∞±ÌéëÏÖòÏù¥ ÏÇ¨Ïö©ÎêúÎã§. Í∑∏ Í≥ºÏ†ïÏùÄ Ïö∞Î¶¨Í∞Ä ÏßÅÏ†ë ÏΩúÎ∞±ÌéëÏÖòÏùÑ Ìò∏Ï∂úÌïòÎäî ÏΩîÎìúÎ•º Ïç®ÎÜìÏùÄ Í≤ÉÏù¥ ÏïÑÎãàÍ≥† map Î©îÏÜåÎìúÍ∞Ä Ïñ¥Î†àÏù¥Ïùò Í∞Å elementÎ•º ÏΩúÎ∞±Ìï®ÏàòÎ°ú Ïñ¥Î£®ÎßåÏ†∏Ï£ºÎäî Í≤ÉÏù¥Îã§.(Ï§ëÏöî)

// // 150. The filter Method
// // 150. The filter Method
// // 150. The filter Method

// // Ìè¨Ïù¥Ïπò, ÎßµÏù¥Îûë Î∞õÎäî argument 3Í∞ú Í∞ôÎãπ
// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

// const depositsFor = [];
// for (const mov of movements) if (mov > 0) depositsFor.push(mov);
// console.log(depositsFor);
// // Ïù¥Î≤àÏóêÎèÑ Ìè¨Ïò§Î∏åÏì∞Î©¥ Îê® Í∑ºÎç∞ ÏÑπÏãúÌïú jsÌîÑÎ°úÍ∑∏ÎûòÎ®∏Îäî Ìï®ÏàòÌòï ÌîÑÎ°úÍ∑∏ÎûòÎ∞çÏùÑ ÏßÄÌñ•ÌïòÍ∏∞ÏúÑÌï¥ ÌïÑÌÑ∞Î•º Ïì∞Ïûê

// const deposits = movements.filter(mov => mov > 0);
// // Í∞ïÏùò ÎÅó, ÎßµÏ≤òÎüº ÏÉà Ïñ¥Î†àÏù¥ Î¶¨ÌÑ¥ÌïòÎäîÎç∞ trueÏù∏ Ïï†Îì§Îßå Î≥¥ÎÇ¥Ï§ÄÎã§ÎäîÏ†ê
// console.log(movements);
// console.log(deposits);

// // 151. The reduce Method
// // 151. The reduce Method
// // 151. The reduce Method

// // Î¶¨ÎìÄÏä§ Î©îÏÜåÎìúÎäî Ïñ¥Î†àÏù¥Î•º ÎèåÎ©¥ÏÑú Îî± ÌïòÎÇòÏùò Î∞∏Î•òÎßå returnÌïúÎã§
// const movements = [200, -400, 3000, -650];
// console.log(movements);

// // ÏûîÍ≥† ÌôïÏù∏
// // reduceÎßåÏùÄ Ìè¨Ïù¥Ïπò, ÎßµÍ≥º Îã§Î•¥Í≤å ÏΩúÎ∞±Ìï®ÏàòÍ∞Ä Î∞õÎäî argumentÍ∞Ä Ï°∞Í∏à Îã§Î•¥Îã§.
// // Ï≤´ Ïù∏ÏûêÎ°ú Ïñ¥ÌÅêÎ©ÄÎ†àÏù¥ÌÑ∞ÎùºÎäî ÏπúÍµ¨Í∞Ä Ïò®Îã§. ÏµúÏ¢Ö Î¶¨ÌÑ¥ÌïòÎäîÍ±∏ ÏúÑÌï¥ÏÑú Ï∂ïÏ†ÅÏùÑ ÌïúÎåÄÎÇò
// // accumulator -> SNOWBALL
// const balance = movements.reduce(function (acc, cur, i, arr) {
//   console.log(`Iteration ${i}: ${acc}`);
//   // Iteration 0: 0
//   // Iteration 1: 200
//   // Iteration 2: -200
//   // Iteration 3: 2800
//   return acc + cur; // Î£®ÌïëÌï†ÎïåÎßàÎã§ accÎäî return ÎêòÎäî Í∞íÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÎêúÎã§
// }, 0); // reduce Î©îÏÜåÎìúÏùò parameterÎäî Îëê Í∞úÏù∏Îç∞, Ï≤´Ïß∏Î°ú ÏΩúÎ∞±Ìï®ÏàòÍ∞Ä Îì§Ïñ¥Í∞ÄÍ≥† ÎëêÎ≤àÏß∏Î°ú accÏùò Ï¥àÍπÉÍ∞íÏùÑ Ï£ºÏñ¥Ïïº ÌïúÎã§.
// console.log(balance); // 2150
// // ÌôïÏã§Ìûà ÌïÑÌÑ∞ÎÇò ÎßµÍ≥ºÎäî Î™®ÏñëÏù¥ Ïä• Îã§Î•¥ÏßÄÎßå Îòê Î≠ê Í∑∏Î†áÍ≤å ÏáΩ Î≥µÏû°ÌïúÍ±¥ ÏóÜÎã§ Í∑∏ÎÉ• ÏÇ≠ Ïô∏Ïö∞Î©¥ Îê†ÎìØ

// const balanceWithArrowFunction = movements.reduce((acc, cur) => acc + cur, 0);
// console.log(balanceWithArrowFunction);

// // Ïù¥Ï†úÎäî Ï†ïÍ≤®Ïö¥ Ìè¨Ïò§Î∏åÏôÄÏùò ÎπÑÍµê
// let balance2 = 0;
// for (const mov of movements) balance2 += mov;
// console.log(balance2); // 2150

// // some and every
// // some and every
// // some and every
// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];
// console.log(movements);

// // EQUALITY
// console.log(movements.includes(3000)); // true

// // SOME:CONDITION
// console.log(movements.some(mov => mov > 1000)); // true
// console.log(movements.some(mov => mov < -1000)); // false

// // EVERY:ALSO CONDITION
// console.log(movements.every(mov => mov > 1000)); // false
// console.log(movements.every(mov => mov > -1000)); // true

// // Separate callback
// const deposit = mov => mov > 0;
// console.log(movements.some(deposit)); // true
// console.log(movements.every(deposit)); // false
// console.log(movements.filter(deposit)); // [200, 450, 3000, 1300]

// // Coding Challenge #2
// // Coding Challenge #2
// // Coding Challenge #2
// // ÎßûÏ∑ÑÎäîÎç∞ arrow functionÏúºÎ°ú Ïì∏ Ïàò ÏûàÎèÑÎ°ù Ìï¥Î≥¥Ïûê

// // Let's go back to Julia and Kate's study about dogs. This time, they want to convert dog ages to human ages and calculate the average age of the dogs in their study.
// // Í∞úÎÇòÏù¥Î•º ÏÇ¨ÎûåÏúºÎ°úÏπòÎ©¥ Î™áÏÇ¥Ïù∏ÏßÄ Ìï¥Î≥¥ÏûêÎÑ§

// // Create a function 'calcAverageHumanAge', which accepts an arrays of dog's ages ('ages'), and does the following things in order:
// const calcAverageHumanAge = function (ages) {
//   // 1. Calculate the dog age in human years using the following formula: if the dog is <= 2 years old, humanAge = 2 * dogAge. If the dog is > 2 years old, humanAge = 16 + dogAge * 4.
//   // ÌôòÏÇ∞(Îßµ)
//   const calcAge = function (dogAge) {
//     let humanAge;
//     if (dogAge <= 2) {
//       humanAge = 2 * dogAge;
//     } else {
//       humanAge = 16 + dogAge * 4;
//     }
//     return humanAge;
//   };
//   const dogsAgeToHuman = ages.map(calcAge);
//   console.log(dogsAgeToHuman);
//   // 2. Exclude all dogs that are less than 18 human years old (which is the same as keeping dogs that are at least 18 years old)
//   // ÎØ∏ÏÑ±ÎÖÑÏûê Í∞úÎäî Ï†úÏô∏ÌïòÎûò(filter) Ïì∞ÎùºÎäîÍ±∞ÏßÄ)
//   const cut = function (age) {
//     const isAdult = age >= 18 ? true : false;
//     return isAdult;
//   };
//   const adultDogs = dogsAgeToHuman.filter(cut);
//   console.log(adultDogs);

//   // 3. Calculate the average human age of all adult dogs (you should already know from other challenges how we calculate averages üòâ)
//   // Ïñ¥Î•∏ Î©çÎ©çÏù¥Îì§ ÎÇòÏù¥Ïùò ÌèâÍ∑†ÏùÑ Í≥ÑÏÇ∞ÌïòÎûò(reduce Ïì∞ÎùºÎäîÍ±∞ÏßÄ)
//   const averageadultDogs =
//     adultDogs.reduce(function (acc, el) {
//       return acc + el;
//     }, 0) / adultDogs.length;
//   console.log(averageadultDogs);
// };
// // 4. Run the function for both test datasets

// // TEST DATA 1: [5, 2, 4, 1, 15, 8, 3]
// calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);
// // TEST DATA 2: [16, 6, 10, 5, 6, 1, 4]
// calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);

// // GOOD LUCK üòÄ

// // Coding Challenge #3
// // Coding Challenge #3
// // Coding Challenge #3

// // Rewrite the 'calcAverageHumanAge' function from the previous challenge, but this time as an arrow function, and using chaining!

// const calcAverageHumanAge = function (ages) {
//   return ages
//     .map(age => (age <= 2 ? 2 * age : 16 + age * 4))
//     .filter(age => (age >= 18 ? true : false))
//     .reduce((acc, age, i, arr) => acc + age / arr.length, 0);
// };

// // TEST DATA 1: [5, 2, 4, 1, 15, 8, 3]
// console.log(calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]));

// // TEST DATA 2: [16, 6, 10, 5, 6, 1, 4]
// console.log(calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]));
// // GOOD LUCK üòÄ

// // The new at Method
// // The new at Method
// // The new at Method
// const arr = [23, 11, 64];
// console.log(arr[0]); // 23
// console.log(arr.at(0)); // 23

// console.log(arr[arr.length - 1]); // 64
// console.log(arr.at(-1)); // 64

// console.log('ÍπÄÏÜåÌòú'.at(-1)); // Ìòú

// // The find Method
// // The find Method
// // The find Method
// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];
// const firstWithdrawal = movements.find(mov => mov < 0);
// console.log(movements); // [200, 450, -400, 3000, -650, -130, 70, 1300]
// console.log(firstWithdrawal); // -400

// console.log(accounts); // [{ name: 'Julia', balance: 0 }, { name: 'Kate', balance: 0 }]

// // Ï°∞Í±¥Ïóê ÎßûÎäî Í∞ÄÏû• ÏïûÏ™ΩÏùò elementÎßå Î±âÎäîÎã§
// const account = accounts.find(acc => acc.owner === 'Jessica Davis');
// console.log(account); // { name: 'Jessica', balance: 0 }

// More Ways of Creating and Filling Arrays
// More Ways of Creating and Filling Arrays
// More Ways of Creating and Filling Arrays

// [1,2,3,4,5,6,7] manuallyÌïòÍ≤å ÎßåÎìúÎäîÎ≤ï
console.log([1, 2, 3, 4, 5, 6, 7]); // [1, 2, 3, 4, 5, 6, 7]
console.log(new Array(1, 2, 3, 4, 5, 6, 7)); // [1, 2, 3, 4, 5, 6, 7]

// Empty arrays + fill method
const x = new Array(7);
// Ïù∏Ïûê ÌïòÎÇòÎßå ÎÑ£ÏúºÎ©¥ Í∑∏ Ïù∏ÏûêÍ∞Ä Í∏∏Ïù¥Î°ú Ï£ºÏñ¥ÏßÄÎäî Îπà? Ïñ¥Î†àÏù¥Í∞Ä ÎêúÎã§Í≥†..
console.log(x); // [undefined, undefined, undefined, undefined, undefined, undefined, undefined]
console.log(x.map(() => 5)); // [undefined, undefined, undefined, undefined, undefined, undefined, undefined]
// Ï£ºÏùò! [5, 5, 5, 5, 5, 5, 5] ÏïÑÎãò
// ÏôÄ Ïù¥Í±¥ ÎßµÏúºÎ°ú Ï±ÑÏö∞ÏßÄÎèÑ Î™ªÌï® ÏäàÎ≤å

// ÏñòÎ•º Ï±ÑÏö∞Î†§Î©¥ fillÎ©îÏÜåÎìú Ïç®ÏïºÌï®
x.fill(1, 3, 5);
console.log(x); // [undefined, undefined, undefined, 1, 1, undefined, undefined]
// Ï≤´Î≤àÏß∏Îäî Ï±ÑÏö∏Í∞í, ÎëêÎ≤àÏ®∞Îäî Ïä¨ÎùºÏù¥Ïä§ ÏãúÏûë, ÎßàÏßÄÎßâÏùÄ Ïä¨ÎùºÏù¥Ïä§ ÎÅó
x.fill(1); // Ïù¥Îü¨Î©¥ Îã§Ï±ÑÏõÄ
console.log(x); // [1, 1, 1, 1, 1, 1, 1]

// ÏïàÎπàÏñ¥Î†àÏù¥ÏóêÎèÑ fill Ïì∏ Ïàò Ïù¥Ïä¥
const arr = [1, 2, 3, 4, 5, 6, 7];
arr.fill(23, 2, 6);
console.log(arr); // [1, 2, 23, 23, 23, 23, 7]

// // [1,2,3,4,5,6,7] programmaticallyÌïòÍ≤å ÎßåÎìúÎäîÎ≤ï
// Array.from
// Î∞∞Ïó¥.methodÌòïÌÉúÎ°ú Ïì∞ÎäîÍ≤å ÏïÑÎãàÎùº Array constructor functionÏß∏Î°ú Ïì¥Îã§.
const y = Array.from({ length: 7 }, () => 1); // Ï≤´Ïù∏ÏûêÎäî length ÌîÑÎ°úÌçºÌã∞ ÎëêÎ≤àÏß∏Îäî Îß§ÌïëÌï®Ïàò(Îßµ Î©îÏÜåÎìúÏóêÏÑú Ïì¥ ÏΩúÎ∞±Ìï®ÏàòÎûë Í∞ôÏùå)
// jonasÎäî Ïù¥Í≤å¬† ÏúÑÏóê 1.new Array(7) ÎßåÎì§Í≥† + 2.fillÎ°ú Ï±ÑÏö¥Í≤ÉÎ≥¥Îã§ Íπ∞ÎÅîÌïú Í≤É Í∞ôÎã§ÎÑ§
console.log(y); // [1, 1, 1, 1, 1, 1, 1]

const z = Array.from({ length: 7 }, (_, i) => i + 1);
console.log(z); // [1, 2, 3, 4, 5, 6, 7]

// Array.from()Ïùò ÏßÑÏ†ïÌïú ÏÇ¨Ïö©Î≤ï
// Array.from() was initially introduced into JavaScript in order to create arrays from array like structures.
// string, set, mapÍ∞ôÏùÄ Ïù¥ÌÑ∞Îü¨Î∏îÌïú Ïï†Îì§ÏùÄ Array.from()ÏúºÎ°ú Array(Î∞∞Ïó¥)Î°ú ÎßåÎì§ Ïàò ÏûàÎã®Îã§. Í∑∏Í≤å Ïã§Ï†ú Ïö©ÎèÑÏù¥Í≥†.
// Î™ÖÎ™ÖÏù¥ fromÏù∏ Ïù¥Ïú†ÎèÑ Ïù∏ÏûêÎ°úÎ∂ÄÌÑ∞ arrayÎ•º ÎßåÎì†Îã§~~ Î≠ê Í∑∏Îü∞ ÏùòÎØ∏ÎùºÍ≥†Ìï®
// ÏøºÎ¶¨ÏÖÄÎ†âÌÑ∞Ïò¨Î°ú Î∞õÎäîÍ≤ÉÏùÄ ÎÖ∏ÎìúÎ¶¨Ïä§Ìä∏ÎùºÍ≥† ÌïòÎäîÎç∞ ArrayÍ∞ôÏù¥ ÏÉùÍ≤ºÏßÄÎßå ÏßÑÏßú ArrayÎäî ÏïÑÎãàÎùºÏÑú(Ïú†ÏÇ¨Î∞∞Ïó¥Ïù¥ÎùºÏÑú) map(), reduce() Í∞ôÏùÄ Î©îÏÜåÎìúÎ•º Ïì∏ Ïàò ÏóÜÎã§Í≥† ÌïúÎã§.
// Ïì∞Î†§Î©¥ NodeListÎ•º ArrayÎ°ú Î∞îÍøîÏïºÌïòÍ≤†ÏßÄÏöî
// Í∑∏ÎñÑ Array.from()Ïù¥ Ï†úÍ≤©Ïù¥ÏßÄÏöî!

labelBalance.addEventListener('click', function () {
  const movementsUI = Array.from(
    document.querySelectorAll('.movements__value'),
    el => Number(el.textContent.replace('‚Ç¨', ''))
  );
  console.log(movementsUI);

  const movementsUI2 = [...document.querySelectorAll('.movements__value')];
});

// Sorting Arrays
// Sorting Arrays
// Sorting Arrays

// Strings
const owners = ['Jonas', 'Zach', 'Adam', 'Martha'];
console.log(owners.sort()); //¬†['Adam', 'Jonas', 'Martha', 'Zach']
console.log(owners); //¬†['Adam', 'Jonas', 'Martha', 'Zach']

// Numbers
const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];
// JSsortÎ©îÏÜåÎìúÎäî stringÏùÑ Ï†ïÎ†¨ÌïòÎäî Î©îÏÜåÎìúÎã§ Í∑∏ÎÉ• Ìò∏Ï∂úÌïòÎ©¥ ÏïàÏóêÎì†Í±∏ Ïä§Ìä∏ÎßÅÏúºÎ°ú Î∞îÍøîÏÑú Ï†ïÎ†¨Ìï®
console.log(movements); //¬†[200, 450, -400, 3000, -650, -130, 70, 1300]
console.log(movements.sort()); // [-130, -400, -650, 1300, 200, 3000, 450, 70]

// Ïà´ÏûêÎ•º Ï†ïÎ†¨ÌïòÎ†§Î©¥ ÏΩúÎ∞±Ìï®ÏàòÎ•º Îã¥ÏïÑÏïºÌï®Îã§
// Í∑∏ ÏΩúÎ∞±Ìï®ÏàòÎäî ÎëêÍ∞ÄÏßÄ parameterÎ•º Í∞ÄÏßëÎãàÎã§
// ÏïÑÎûò a: currentValue b: nextValue
movements.sort((a, b) => a - b);
console.log(movements); //¬†[-650, -400, -130, 70, 200, 450, 1300, 3000]

// ÏñëÏàò return: A, B (keep order)
// ÏùåÏàò return: B, A (switch order)

// Ascending ÌÅ∞->Ï§ë->Ïûë
movements.sort((a, b) => b - a);
// movements.sort((a, b) => {
//   if (a > b) return 1;
//   if (a < b) return -1;
// });
console.log(movements); //¬†[3000, 1300, 450, 200, 70, -130, -400, -650]

// Descending Ïûë->Ï§ë->ÌÅ∞
movements.sort((a, b) => a - b);
// movements.sort((a, b) => {
//   if (a > b) return -1;
//   if (a < b) return 1;
// });
console.log(movements); //¬†[-650, -400, -130, 70, 200, 450, 1300, 3000]

// Îã§Ï§ëÏ°∞Í±¥: https://velog.io/@protect-me/Javascript-Sort-%EC%BB%B4%ED%8C%A9%ED%8A%B8-%EA%B0%80%EC%9D%B4%EB%93%9C-protect-me
